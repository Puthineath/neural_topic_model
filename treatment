import sys
from SPARQLWrapper import SPARQLWrapper, JSON
from pprint import pprint

endpoint_url = "http://publications.europa.eu/webapi/rdf/sparql"

concept_scheme = "http://eurovoc.europa.eu/100141"

# get the top concept
query_top_concept = """
            PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
            SELECT #concept
            FROM <#scheme>
            WHERE {
                #concept skos:topConceptOf <#scheme>  .
            }
        """
# get narrower concept
query_narrow = """
                    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
                    PREFIX euvoc: <http://publications.europa.eu/ontology/euvoc#>
                    PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

                    SELECT ?child
                    FROM <#scheme>
                    WHERE {
                        <#concept> skos:narrower ?child  .
                    }
                """


def get_results(endpoint, query, concept=""):
    sparql = SPARQLWrapper(endpoint)
    tmp_query = query.replace("#concept", concept)
    tmp_query = tmp_query.replace("#scheme", concept_scheme)
    sparql.setQuery(tmp_query)
    sparql.setReturnFormat(JSON)
    return sparql.query().convert()


def get_top_concept(results):
    top_concept = [result['concept']['value'] for result in results["results"]["bindings"]]
    return top_concept


def get_narrow(concept):
    narrow_results = get_results(endpoint_url, " ".join(query_narrow.split()), concept=concept)
    narrow_results_list = [narrow_result['child']['value'] for narrow_result in narrow_results["results"]["bindings"]]
    for elt in narrow_results_list:
        print(elt)
        get_narrow(elt)
    return narrow_results_list


def main():
    print("------------Get the top concepts------------------")
    results = get_results(endpoint_url," ".join(query_top_concept.split()), concept="?concept")
    top_concepts = get_top_concept(results)
    # pprint(top_concepts)
    print("------------Get narrower concepts------------------")

    lis = [get_narrow(top_concept) for top_concept in top_concepts]
    pprint(lis)
    print(len(lis))


if __name__ == '__main__':
    pprint(main())